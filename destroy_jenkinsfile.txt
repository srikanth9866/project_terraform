pipeline {
    agent any

    environment {
        TERRAFORM_VERSION = "1.5.7"
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    }

    parameters {
        booleanParam(name: 'DESTROY_INFRA', defaultValue: false, description: 'Set to true to destroy the infrastructure')
    }

    stages {
        stage('CLONE SCM') {
            steps {
                echo 'Cloning code from GitHub...'
                git branch: 'main', url: 'https://github.com/srikanth9866/project_terraform.git'
            }
        }

        stage('Install Terraform') {
            steps {
                script {
                    if (isUnix()) {
                        sh '''
                            if ! command -v terraform &> /dev/null; then
                                echo "Installing Terraform..."
                                curl -LO https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
                                unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip
                                sudo mv terraform /usr/local/bin/
                                rm terraform_${TERRAFORM_VERSION}_linux_amd64.zip
                            else
                                echo "Terraform is already installed."
                            fi
                            terraform --version
                        '''
                    } else {
                        bat '''
                            if not exist terraform (
                                echo "Installing Terraform..."
                                curl -LO https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_windows_amd64.zip
                                powershell -Command "Expand-Archive -Path terraform_${TERRAFORM_VERSION}_windows_amd64.zip -DestinationPath C:/terraform"
                                move C:/terraform/terraform.exe C:/Windows/System32
                                del terraform_${TERRAFORM_VERSION}_windows_amd64.zip
                            ) else (
                                echo "Terraform is already installed."
                            )
                            terraform --version
                        '''
                    }
                }
            }
        }

        stage('Terraform Init') {
            steps {
                echo 'Initializing Terraform...'
                sh 'terraform init'
            }
        }

        stage('Terraform Plan') {
            steps {
                echo 'Running Terraform Plan...'
                sh 'terraform plan -out=tfplan'
            }
        }

        stage('Terraform Apply') {
            steps {
                script {
                    if (params.DESTROY_INFRA == false) {
                        echo 'Applying Terraform changes...'
                        sh 'terraform apply -auto-approve tfplan'
                    } else {
                        echo 'Skipping Terraform Apply (DESTROY_INFRA is true)...'
                    }
                }
            }
        }

        stage('Retrieve Public IP') {
            steps {
                script {
                    if (params.DESTROY_INFRA == false) {
                        echo 'Retrieving Terraform Outputs...'
                        def publicIp = sh(script: 'terraform output -raw public_ip', returnStdout: true).trim()
                        echo "Public IP of the EC2 instance: ${publicIp}"
                    } else {
                        echo 'Skipping Public IP retrieval (DESTROY_INFRA is true)...'
                    }
                }
            }
        }

        stage('Terraform Destroy') {
            steps {
                script {
                    if (params.DESTROY_INFRA == true) {
                        echo 'Destroying Terraform infrastructure...'
                        sh 'terraform destroy -auto-approve'
                    } else {
                        echo 'Skipping Terraform Destroy (DESTROY_INFRA is false)...'
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check the logs for details.'
        }
        always {
            cleanWs()
        }
    }
}